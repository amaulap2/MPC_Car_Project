classdef NmpcControl_overtake < handle

    properties
        % The NMPC problem
        opti

        % Problem parameters
        x0, ref, x0other

        % Most recent problem solution
        sol

        % The input that you want to apply to the system
        u0

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % Add any variables you would like to read to debug here
        % and then store them in the NmpcControl function below.
        % e.g., you could place X here and then add obj.X = X
        % in the NmpcControl function below.
        % 
        % After solving the problem, you can then read these variables 
        % to debug via
        %   nmpc.sol.value(nmpc.X)
        % 
        X, U
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
    end

    methods
        function obj = NmpcControl_overtake(car, H)

            import casadi.*

            N_segs = ceil(H/car.Ts); % Horizon steps
            N = N_segs + 1;          % Last index in 1-based Matlab indexing

            nx = 4;
            nu = 2;

            % Define the NMPC optimization problem
            opti = casadi.Opti();
            
            % Parameters (symbolic)
            obj.x0 = opti.parameter(nx, 1);       % initial state
            obj.ref = opti.parameter(2, 1);       % target y, velocity
            obj.x0other = opti.parameter(nx, 1);  % initial state of other car

            % SET THIS VALUE TO BE YOUR CONTROL INPUT
            obj.u0 = opti.variable(nu, 1);

            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE

            % Define your problem using the opti object created above
            % Variables
            X = opti.variable(nx, N); 
            U = opti.variable(nu, N - 1); 

            X_other = opti.variable(nx, N); 

            Ts = car.Ts;

            opti.subject_to(obj.x0 == X(:, 1));
            opti.subject_to( obj.u0 == U(:,1) );

            opti.subject_to(obj.x0other == X_other(:, 1));
            
            cost = 0;

            Q=diag([0 1 1 1]);
            R=eye(2);
            x_ref=[0; obj.ref(1); 0; obj.ref(2)];

%             a = 4.3/2;
%             b = 1.8/2;
% 
%             H = [1/a^2 0;0 1/b^2];
              H=diag([1/100 1/9]);

%             overtake_before_too_late = 9;
    
            x_next = @(x,u) RK4(x,u,Ts,@car.f);
    
            % Constraints on Xother
            opti.subject_to(X_other(1,2)==X_other(1,1)+X_other(4,1)*car.Ts);
            opti.subject_to( X_other([2,3],2) ==X_other([2,3],1));
            opti.subject_to(X_other(4,2)==X_other(4,1));
            
            % Constraints on U and X
            opti.subject_to(-0.5236 <= U(1,1) <= 0.5236);
            opti.subject_to(-1.0 <= U(2,1) <= 1.0);
            opti.subject_to(X(:,2)==f_discrete(X(:,1),U(:,1)))
            
            for k=2:N-1
                
                % Constraints on Xother
                opti.subject_to(X_other(1,k+1)==X_other(1,k)+X_other(4,k)*car.Ts)
                opti.subject_to(X_other([2,3],k+1)==X_other([2,3],k));
                opti.subject_to(X_other(4,k+1)==X_other(4,k));

                % Avoid collisions
                opti.subject_to([X(1,k)-X_other(1,k);X(2,k)-X_other(2,k)]'*H_const*[X(1,k)-Xother(1,k);X(2,k)-Xother(2,k)]>= 1);

                % Constraints on X and U
                opti.subject_to(X(:,k+1) == f_discrete(X(:,k),U(:,k)))
                opti.subject_to(-0.5 <= X(2,k) <= 3.5);
                opti.subject_to(-0.0873 <= X(3,k) <= 0.0873);
                opti.subject_to(-0.5236 <= U(1,k) <= 0.5236);
                opti.subject_to(-1.0 <= U(2,k) <= 1.0);

                % Update cost
                cost=cost+((X(:,k)-x_ref)'*Q*(X(:,k)-x_ref))+(U(:,k)'*R*U(:,k));
            end
            

            opti.minimize(cost);

            % YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE YOUR CODE HERE
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

            % Store the defined problem to solve in get_u
            obj.opti = opti;

            % Setup solver
            options = struct;
            options.ipopt.print_level = 0;
            options.print_time = 0;
            options.expand = true;
            obj.opti.solver('ipopt', options);
        end

        function u = get_u(obj, x0, ref, x0other)

            if nargin < 4
                x0other = zeros(4, 1);
            end

            % Compute solution from x0
            obj.solve(x0(1:4), ref, x0other(1:4));

            u = obj.sol.value(obj.u0);
        end

        function solve(obj, x0, ref, x0other)

            % Pass parameter values
            obj.opti.set_value(obj.x0, x0);
            obj.opti.set_value(obj.ref, ref);
            obj.opti.set_value(obj.x0other, x0other);

            obj.sol = obj.opti.solve();   % actual solve
            
            % Set warm start for next solve
            obj.opti.set_initial(obj.sol.value_variables());
            obj.opti.set_initial(obj.opti.lam_g, obj.sol.value(obj.opti.lam_g));
        end
    end
end
